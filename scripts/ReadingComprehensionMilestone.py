# Form implementation generated from reading ui file 'designerUIFiles/milestones/Reading-Comp-Basic-Layout.ui'
#
# Created by: PyQt6 UI code generator 6.5.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
import ReadingComprehensionCompleted as reading_completed
import settings
import random

class Ui_Questions(QtWidgets.QWidget):
    def __init__(self, settings:settings.Settings):
        super().__init__()
        self.settings = settings
        self.setupUi()
        self.questions = self.initQuestions()
        self.questionIndex = 0
        self.chooseQuestion()
        

    def setupUi(self):
        self.setObjectName("Form")
        self.gridLayout = QtWidgets.QGridLayout(self)
        self.gridLayout.setObjectName("gridLayout")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setContentsMargins(75, 75, 75, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.questionLayout = QtWidgets.QHBoxLayout()
        self.questionLayout.setSpacing(20)
        self.questionLayout.setObjectName("questionLayout")
        self.question = QtWidgets.QLabel(parent=self)
        self.question.setStyleSheet("""
                                    QLabel {
                                        color: #324143;
                                        text-align: center;
                                        font-family: Niramit;
                                        font-size: 45px;
                                        font-style: normal;
                                        font-weight: 600;
                                        line-height: normal;
                                        }
                                    """)
        self.question.setObjectName("question")
        self.question.setWordWrap(True)
        self.question.setAlignment(QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.questionLayout.addWidget(self.question, 0, QtCore.Qt.AlignmentFlag.AlignHCenter|QtCore.Qt.AlignmentFlag.AlignBottom)
        self.resetQuestionButton = QtWidgets.QPushButton(parent=self, clicked = lambda: self.chooseQuestion())
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.resetQuestionButton.sizePolicy().hasHeightForWidth())
        self.resetQuestionButton.setSizePolicy(sizePolicy)
        self.resetQuestionButton.setStyleSheet("""
                                                QPushButton {
                                                            background-color: transparent
                                                        }
                                               """)
        self.resetQuestionButton.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("UI/milestoneUI/switchPrompt.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.resetQuestionButton.setIcon(icon)
        self.resetQuestionButton.setIconSize(QtCore.QSize(50, 50))
        self.resetQuestionButton.setObjectName("resetQuestionButton")
        self.questionLayout.addWidget(self.resetQuestionButton, 0, QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignBottom)
        self.questionLayout.setStretch(0, 2)
        self.verticalLayout.addLayout(self.questionLayout)
        self.textBoxLayout = QtWidgets.QHBoxLayout()
        self.textBoxLayout.setObjectName("textBoxLayout")
        self.textBox = QtWidgets.QTextEdit(parent=self)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.textBox.sizePolicy().hasHeightForWidth())
        self.textBox.setSizePolicy(sizePolicy)
        self.textBox.setMinimumSize(QtCore.QSize(1200, 330))
        self.textBox.setStyleSheet("""
                                        QTextEdit {
                                                border-radius: 10px;
                                                border: 0px solid #FCFFED;
                                                background: #FFF;
                                        }
                                   """)
        self.textBox.setObjectName("textBox")
        self.textBox.setFont(QtGui.QFont(self.settings.text["style"], int(self.settings.text["size"])))
        
        shadow = QtWidgets.QGraphicsDropShadowEffect()

        shadow.setBlurRadius(10)
        shadow.setYOffset(5)
        shadow.setXOffset(0)
        shadow.setColor(QtGui.QColor(0, 0, 0, 64))

        self.textBox.setGraphicsEffect(shadow)

        self.textBoxLayout.addWidget(self.textBox)
        self.verticalLayout.addLayout(self.textBoxLayout)
        self.submitLayout = QtWidgets.QHBoxLayout()
        self.submitLayout.setObjectName("submitLayout")
        self.submitInputButton = QtWidgets.QPushButton(parent=self, clicked = lambda: self.submitInput(self.textBox.toPlainText()))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(100)
        sizePolicy.setVerticalStretch(40)
        sizePolicy.setHeightForWidth(self.submitInputButton.sizePolicy().hasHeightForWidth())
        self.submitInputButton.setSizePolicy(sizePolicy)
        self.submitInputButton.setMinimumSize(QtCore.QSize(150, 65))
        self.submitInputButton.setStyleSheet("""
                                             QPushButton 
                                                {
                                                    color: #FCFFED;
                                                    font-family: Roboto;
                                                    font-size: 32px;
                                                    font-style: normal;
                                                    font-weight: 400;
                                                    line-height: normal;
                                                    background-color: rgb(78, 134, 150);
                                                    border-radius: 20px;
                                                }
                                                
                                                QPushButton::hover {
                                                    background-color: rgb(109, 187, 209);
                                                }
                                             """)
        self.submitInputButton.setObjectName("submitInputButton")
        self.submitLayout.addWidget(self.submitInputButton, 0, QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTop)
        self.verticalLayout.addLayout(self.submitLayout)

        self.completionScreen = reading_completed.Ui_Form()

        self.gridLayout.addLayout(self.verticalLayout, 0, 0, 1, 1)
        self.gridLayout.addWidget(self.completionScreen)

        self.completionScreen.hide()

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("Form", "Form"))
        self.question.setText(_translate("Form", "<Reading Comp Question>"))
        self.submitInputButton.setText(_translate("Form", "Submit"))

    def initQuestions(self):
        return [
            "Summarize the last section in 1-2 sentences.",
            "What is your number one take away from what you've just read?",
            "What did you find most interesting from the last section?",
            "What are some key details or facts presented in the text?",
            "Does this text remind you of anything else you've read?",
            "What emotions or thoughts did the text evoke in you?",
            "Write down the main idea of this text in a few sentences.",
            "Can you make any predictions based on the information given in this text?"
            ]

    def chooseQuestion(self):
        choice = random.randrange(0, len(self.questions))

        while choice == self.questionIndex:
            choice = random.randrange(0, len(self.questions))

        self.questionIndex = choice
        self.question.setText(self.questions[self.questionIndex])

    def loadCompletionScreen(self):
        """There is absolutely a better way to do this but this is fine."""
        self.question.hide()
        self.textBox.hide()
        self.submitInputButton.hide()
        self.resetQuestionButton.hide()
        self.completionScreen.show()

    def submitInput(self, text):
        """Accept user input for prompt and proceed to the next screen"""
        self.loadCompletionScreen()
