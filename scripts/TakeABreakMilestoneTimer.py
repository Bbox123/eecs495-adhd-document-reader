# Form implementation generated from reading ui file 'designerUIFiles/milestones/takeABreakPartTwo.ui'
#
# Created by: PyQt6 UI code generator 6.5.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets, QtMultimedia


class Ui_Timer(QtWidgets.QWidget):
    def __init__(self):
        super(Ui_Timer, self).__init__()
        self.setupUi()

    def setupUi(self):
        # setting time and text for timer
        self.timerTime = QtCore.QTime(0, 5)
        self.timerTimeText = "5:00"

        # media for when time is up
        self.mediaPlayer = QtMultimedia.QMediaPlayer()
        self.mediaPlayer.setSource(QtCore.QUrl.fromLocalFile("UI/audioFiles/timerBuzzer_02.wav"))
        self.audioOutput = QtMultimedia.QAudioOutput()
        self.mediaPlayer.setAudioOutput(self.audioOutput)

        self.setObjectName("Timer")
        self.resize(1051, 735)
        self.setStyleSheet("border-color: rgb(255, 255, 255);")
        self.gridLayout = QtWidgets.QGridLayout(self)
        self.gridLayout.setContentsMargins(9, 9, -1, -1)
        self.gridLayout.setObjectName("gridLayout")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setContentsMargins(-1, 0, -1, 20)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.titleLayout = QtWidgets.QFrame(parent=self)
        self.titleLayout.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.titleLayout.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.titleLayout.setObjectName("titleLayout")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.titleLayout)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_3.addItem(spacerItem)
        self.title = QtWidgets.QLabel(parent=self.titleLayout)
        self.title.setStyleSheet("""
                                color: #324143;
                                font-family: Niramit;
                                font-size: 55px;
                                font-style: normal;
                                font-weight: 600;
                                line-height: normal;
                                 """)
        self.title.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.title.setObjectName("title")
        self.verticalLayout_3.addWidget(self.title)
        self.subtitle = QtWidgets.QLabel(parent=self.titleLayout)
        self.subtitle.setStyleSheet("color: #324143;\n"
                                    "font-family: Roboto;\n"
                                    "font-size: 30px;\n"
                                    "font-style: normal;\n"
                                    "font-weight: 400;\n"
                                    "line-height: normal;")
        self.subtitle.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.subtitle.setObjectName("subtitle")
        self.verticalLayout_3.addWidget(self.subtitle)
        self.verticalLayout.addWidget(self.titleLayout)
        self.timerWidgetLayout = QtWidgets.QHBoxLayout()
        self.timerWidgetLayout.setContentsMargins(20, -1, 20, -1)
        self.timerWidgetLayout.setObjectName("timerWidgetLayout")
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.timerWidgetLayout.addItem(spacerItem1)
        self.timer = QtWidgets.QWidget(parent=self)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.timer.sizePolicy().hasHeightForWidth())
        self.timer.setSizePolicy(sizePolicy)
        self.timer.setMinimumSize(QtCore.QSize(400, 400))
        self.timer.setStyleSheet("")
        self.timer.setObjectName("timer")
        self.circularProgress = QtWidgets.QFrame(parent=self.timer)
        self.circularProgress.setGeometry(QtCore.QRect(50, 50, 300, 300))
        self.circularProgress.setStyleSheet("QFrame {\n"
"    border-radius: 150px;\n"
"    background-color: qconicalgradient(cx:0.5, cy:0.5, angle:90, stop:0.749 rgba(255, 170, 255, 0), stop:.75 rgba(78, 134, 150, 255));\n"
"    border-color: transparent;\n"
"}")
        self.circularProgress.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
        self.circularProgress.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.circularProgress.setObjectName("circularProgress")
        self.progressBackground = QtWidgets.QFrame(parent=self.timer)
        self.progressBackground.setGeometry(QtCore.QRect(10, 10, 375, 375))
        self.progressBackground.setStyleSheet("QFrame {\n"
"    border-radius: 187px;\n"
"    background-color: rgb(200, 227, 232);\n"
"}")
        self.progressBackground.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.progressBackground.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.progressBackground.setObjectName("progressBackground")
        self.progressForeground = QtWidgets.QFrame(parent=self.timer)
        self.progressForeground.setGeometry(QtCore.QRect(60, 60, 280, 280))
        self.progressForeground.setStyleSheet("QFrame {\n"
"    border-radius: 140px;\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-color: transparent;\n"
"}")
        self.progressForeground.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
        self.progressForeground.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.progressForeground.setObjectName("progressForeground")
        self.textContainer = QtWidgets.QFrame(parent=self.timer)
        self.textContainer.setGeometry(QtCore.QRect(105, 160, 200, 100))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.textContainer.sizePolicy().hasHeightForWidth())
        self.textContainer.setSizePolicy(sizePolicy)
        self.textContainer.setStyleSheet("background-color: transparent;\n"
"border-color: transparent;")
        self.textContainer.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
        self.textContainer.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.textContainer.setLineWidth(1)
        self.textContainer.setObjectName("textContainer")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.textContainer)
        self.gridLayout_2.setSizeConstraint(QtWidgets.QLayout.SizeConstraint.SetFixedSize)
        self.gridLayout_2.setContentsMargins(25, 0, 0, 0)
        self.gridLayout_2.setSpacing(0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.time = QtWidgets.QLabel(parent=self.textContainer)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.time.sizePolicy().hasHeightForWidth())
        self.time.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Roboto")
        font.setPointSize(0)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.time.setFont(font)
        self.time.setStyleSheet("""
                                color: #000;
                                font-family: Roboto;
                                font-size: 65px;
                                font-style: normal;
                                font-weight: 400;
                                line-height: normal;
                                background-color: transparent;
                                """)
        self.time.setScaledContents(False)
        self.time.setAlignment(QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.time.setWordWrap(False)
        self.time.setObjectName("time")
        self.gridLayout_2.addWidget(self.time, 0, 0, 1, 1)
        self.progressBackground.raise_()
        self.circularProgress.raise_()
        self.progressForeground.raise_()
        self.textContainer.raise_()
        self.timerWidgetLayout.addWidget(self.timer)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.timerWidgetLayout.addItem(spacerItem2)
        self.verticalLayout.addLayout(self.timerWidgetLayout)
        self.pauseRestartButtonsLayout = QtWidgets.QHBoxLayout()
        self.pauseRestartButtonsLayout.setSizeConstraint(QtWidgets.QLayout.SizeConstraint.SetDefaultConstraint)
        self.pauseRestartButtonsLayout.setContentsMargins(-1, 0, -1, -1)
        self.pauseRestartButtonsLayout.setSpacing(60)
        self.pauseRestartButtonsLayout.setObjectName("pauseRestartButtonsLayout")
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.pauseRestartButtonsLayout.addItem(spacerItem3)
        self.pauseButton = QtWidgets.QPushButton(parent=self, clicked = lambda: self.pauseTimer())
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pauseButton.sizePolicy().hasHeightForWidth())
        self.pauseIcon = QtGui.QPixmap("UI/icons/pause.png")
        self.playIcon = QtGui.QPixmap("UI/icons/play.png")
        playIconSize = self.playIcon.size()
        self.pauseButton.setSizePolicy(sizePolicy)
        self.pauseButton.setMinimumSize(QtCore.QSize(75, 75))
        self.pauseButton.setMaximumSize(QtCore.QSize(75, 16777215))
        self.pauseButton.setBaseSize(QtCore.QSize(40, 40))
        self.pauseButton.setCheckable(True)
        self.pauseButton.setStyleSheet("""QPushButton {
                                        border-color: rgb(255, 255, 255);
                                        color: rgb(78, 134, 150);
                                        background-color: rgb(200, 227, 232);
                                        border: none;    
                                        border-radius: 35px;
                                        border-style: outset;
                                        padding: 5px;
                                        font-size: 40px;
                                        }
                                        QPushButton:checked {
                                        background-color: rgb(161, 197, 200);      
                                        }
                                       """)
        self.pauseButton.setObjectName("pauseButton")
        self.pauseRestartButtonsLayout.addWidget(self.pauseButton, 0, QtCore.Qt.AlignmentFlag.AlignTop)
        self.restartButton = QtWidgets.QPushButton(parent=self, clicked = lambda: self.restartTimer())
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.restartButton.sizePolicy().hasHeightForWidth())
        self.restartButton.setSizePolicy(sizePolicy)
        self.restartButton.setMinimumSize(QtCore.QSize(75, 75))
        self.restartButton.setMaximumSize(QtCore.QSize(75, 75))
        self.restartButton.setCheckable(True)
        self.restartButton.setStyleSheet("""QPushButton {
                                            border-color: rgb(255, 255, 255);
                                            color: rgb(78, 134, 150);
                                            background-color: rgb(200, 227, 232);
                                            border: none;    
                                            border-radius: 35px;
                                            border-style: outset;
                                            padding: 5px;
                                        }
                                         QPushButton:pressed {
                                            background-color: rgb(161, 197, 200);
                                         }
                                         """)
        self.restartButton.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("UI/milestoneUI/refresh-arrow-colorized.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.restartButton.setIcon(icon)
        self.restartButton.setIconSize(QtCore.QSize(55, 55))
        self.restartButton.setObjectName("restartButton")
        self.pauseRestartButtonsLayout.addWidget(self.restartButton, 0, QtCore.Qt.AlignmentFlag.AlignTop)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.pauseRestartButtonsLayout.addItem(spacerItem4)
        self.verticalLayout.addLayout(self.pauseRestartButtonsLayout)
        spacerItem5 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout.addItem(spacerItem5)
        self.verticalLayout.setStretch(0, 1)
        self.verticalLayout.setStretch(1, 2)
        self.verticalLayout.setStretch(2, 1)
        self.gridLayout.addLayout(self.verticalLayout, 0, 0, 1, 1)

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)

        self.timerWidget = QtCore.QTimer()
        self.timeLeft = self.timerTime # 5 minutes

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("Timer", "Form"))
        self.title.setText(_translate("Timer", "Take a break."))
        self.subtitle.setText(_translate("Timer", "Time Left:"))
        self.time.setText(_translate("Timer", "00:00"))
        self.pauseButton.setText(_translate("Timer", "ll"))

    def startTimer(self):
        self.setProgressBarValue(0)
        time = self.timerTimeText
        self.time.setText(time)
        self.timerWidget.timeout.connect(self.updateTimer) # every update calls this function
        self.timerWidget.start(1000) # updates every second
    
    def updateTimer(self):
        self.timeLeft = self.timeLeft.addSecs(-1)
        # Get time remaining and create value to set progress
        secondsPassed = self.timeLeft.secsTo(self.timerTime)
        value = float(secondsPassed) / (self.timerTime.minute() * 60.0)
        self.setProgressBarValue(value)
        self.setTimeText(self.timeLeft.minute(), self.timeLeft.second())

        # Timer is finished
        if value >= 1:
            self.finishTimer()

    def pauseTimer(self):
        if self.timerWidget.isActive():
            self.pauseButton.setIcon(QtGui.QIcon(self.playIcon))
            self.pauseButton.setIconSize(QtCore.QSize(40, 40))
            self.pauseButton.setText("")
            self.timerWidget.stop()
        else:
            self.timerWidget.start(1000) # updates every second
            _translate = QtCore.QCoreApplication.translate
            empty_icon = QtGui.QIcon()
            self.pauseButton.setIcon(empty_icon)
            self.pauseButton.setText(_translate("Timer", "ll"))

    def restartTimer(self):
        self.timerWidget.stop()
        self.timeLeft = self.timerTime # 5 minutes
        time = self.timerTimeText
        self.time.setText(time)
        self.title.setText("Take a break.")
        self.title.setStyleSheet("""
                                color: #324143;
                                font-family: Niramit;
                                font-size: 55px;
                                font-style: normal;
                                font-weight: 600;
                                line-height: normal;
                                 """)
        self.subtitle.setText("Time Left:")
        self.time.setStyleSheet("""
                                color: #000;
                                font-family: Roboto;
                                font-size: 65px;
                                font-style: normal;
                                font-weight: 400;
                                line-height: normal;
                                background-color: transparent;
                                """)
        self.setProgressBarValue(0)

        if self.pauseButton.isChecked() == False:
            self.timerWidget.start(1000)
            

    def finishTimer(self):
        self.title.setText("Break is up.")
        self.title.setStyleSheet("""
                                color: #A7312A;
                                font-family: Niramit;
                                font-size: 55px;
                                font-style: normal;
                                font-weight: 600;
                                line-height: normal;
                                """)
        self.subtitle.setText("Continue reading...")
        self.time.setStyleSheet("""
                            color: #A7312A;
                            font-family: Roboto;
                            font-size: 65px;
                            font-style: normal;
                            font-weight: 400;
                            line-height: normal;
                            background-color: transparent;
                            """)
        self.timerWidget.stop()
        self.mediaPlayer.play()

            
    def setTimeText(self, minute, second):
        time = f"{minute}:{second}"
        if second < 10:
            time = f"{minute}:0{second}"
        self.time.setText(time)

    def setProgressBarValue(self, value):

        # Create a base stylesheet to replace values with
        styleSheet = """
        QFrame {
                border-radius: 150px;
                background-color: qconicalgradient(cx:0.5, cy:0.5, angle:90, stop:{STOP_1} rgba(255, 170, 255, 0), stop:{STOP_2} rgba(78, 134, 150, 255));
                border-color: transparent;
        }
        """

        # Get progress bar value, invert values
        # stop works from 1.0 to 0.0 where 0.0 represents the center of the conical gradient and 1.0 represents the edge
        progress = 1.0 - value

        # Make new values
        stop_1 = str(progress - 0.001)
        stop_2 = str(progress)

        # Set new values in style sheet
        newStyleSheet = styleSheet.replace("{STOP_1}", stop_1).replace("{STOP_2}", stop_2)

        # Apply style sheet to progress bar
        self.circularProgress.setStyleSheet(newStyleSheet)

    
