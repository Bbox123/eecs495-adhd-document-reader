# Form implementation generated from reading ui file 'designerUIFiles/milestones/TakeABreakMilestoneUpdatedUI.ui'
#
# Created by: PyQt6 UI code generator 6.5.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
import TakeABreakMilestoneTimer as m_timer
import cardMatchingMilestone as m_cardmatch
import random
import settings


class Ui_Generic_Milestone(QtWidgets.QWidget):
    
    def __init__(self, readingBoxGridLayout: QtWidgets.QGridLayout, readingScreen):
        super().__init__()
        self.readingScreen = readingScreen
        self.readingBoxGridLayout = readingBoxGridLayout
        self.settings:settings = readingScreen.adhdReader.settings
        self.mileStoneChoice = ""
        self.setupUi()
        self.determineMileStone()

    def setupUi(self):
        self.setObjectName("genericMilestone")
        self.resize(1221, 749)
        self.setStyleSheet("border-color: rgb(255, 255, 255);")
        self.gridLayout_2 = QtWidgets.QGridLayout(parent=self)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setContentsMargins(-1, 20, 0, -1)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.fireworks1 = QtWidgets.QLabel(parent=self)
        self.fireworks1.setStyleSheet("border-color: rgb(255, 255, 255);")
        self.fireworks1.setText("")
        self.fireworks1.setPixmap(QtGui.QPixmap("designerUIFiles/milestones/../../Downloads/fireworks1.png"))
        self.fireworks1.setObjectName("fireworks1")
        self.verticalLayout.addWidget(self.fireworks1, 0, QtCore.Qt.AlignmentFlag.AlignHCenter|QtCore.Qt.AlignmentFlag.AlignTop)
        self.horizontalLayout.addLayout(self.verticalLayout)
        self.mainUI = QtWidgets.QVBoxLayout()
        self.mainUI.setContentsMargins(0, 20, 0, 0)
        self.mainUI.setObjectName("mainUI")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem)
        self.label = QtWidgets.QLabel(parent=self)
        self.label.setStyleSheet("width: 645px;\n"
"font: 45pt \"Niramit\";\n"
"height: 76px;\n"
"flex-shrink: 0;\n"
"color: #324143;\n"
"font-size: 45px;\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"line-height: normal;")
        self.label.setObjectName("label")
        self.horizontalLayout_4.addWidget(self.label)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem1)
        self.mainUI.addLayout(self.horizontalLayout_4)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        spacerItem2 = QtWidgets.QSpacerItem(561, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem2)
        '''self.milestoneNum = QtWidgets.QLabel(parent=self)
        self.milestoneNum.setStyleSheet("color: #4E8696;\n"
"font-family: Inter;\n"
"font-size: 40px;\n"
"font-style: normal;\n"
"font-weight: 600;\n"
"line-height: normal;\n"
"border-color: rgb(255, 255, 255);")
        self.milestoneNum.setObjectName("milestoneNum")
        self.horizontalLayout_2.addWidget(self.milestoneNum)
        self.of = QtWidgets.QLabel(parent=self)
        self.of.setStyleSheet("color: #4E8696;\n"
"font-family: Inter;\n"
"font-size: 40px;\n"
"font-style: normal;\n"
"font-weight: 600;\n"
"line-height: normal;\n"
"border-color: rgb(255, 255, 255);\n"
"width: 50;")
        self.of.setObjectName("of")
        self.horizontalLayout_2.addWidget(self.of)
        '''
        self.milestoneTotal = QtWidgets.QLabel(parent=self)
        self.milestoneTotal.setStyleSheet("color: #4E8696;\n"
"font-family: Inter;\n"
"font-size: 40px;\n"
"font-style: normal;\n"
"font-weight: 600;\n"
"line-height: normal;\n"
"border-color: rgb(255, 255, 255);")
        self.milestoneTotal.setObjectName("milestoneTotal")
        self.milestoneTotal.setAlignment(QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.horizontalLayout_2.addWidget(self.milestoneTotal)
        spacerItem3 = QtWidgets.QSpacerItem(561, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem3)
        self.mainUI.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem4)
        self.label_2 = QtWidgets.QLabel(parent=self)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_5.addWidget(self.label_2)
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem5)
        self.mainUI.addLayout(self.horizontalLayout_5)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem6)
        self.startButton = QtWidgets.QPushButton(parent=self, clicked = lambda: self.goToMilestone())
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.startButton.sizePolicy().hasHeightForWidth())
        self.startButton.setSizePolicy(sizePolicy)
        self.startButton.setMinimumSize(QtCore.QSize(444, 95))
        self.startButton.setMaximumSize(QtCore.QSize(16777215, 100))
        self.startButton.setStyleSheet("QPushButton {\n"
"    border: none;    \n"
"    background-color: rgb(78, 134, 150);\n"
"    border-radius: 20px;\n"
"    color: #FCFFED;\n"
"    font-family: Roboto;\n"
"    font-size: 32px;\n"
"    font-style: normal;\n"
"    font-weight: 400;\n"
"    line-height: normal;\n"
"}\n"
"\n"
"QPushButton::hover {\n"
"    background-color: rgb(46, 79, 88);\n"
"}")
        self.startButton.setObjectName("startButton")
        self.horizontalLayout_3.addWidget(self.startButton)
        spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem7)
        self.mainUI.addLayout(self.horizontalLayout_3)
        self.skipButton = QtWidgets.QPushButton(parent=self, clicked = lambda: self.readingScreen.loadNextPartition())
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.skipButton.sizePolicy().hasHeightForWidth())
        self.skipButton.setSizePolicy(sizePolicy)
        self.skipButton.setMinimumHeight(40)
        font = QtGui.QFont()
        font.setFamily("Inter")
        font.setPointSize(20)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(True)
        font.setWeight(50)
        self.skipButton.setFont(font)
        self.skipButton.setStyleSheet("QPushButton {\n"
"    border: none;    \n"
"    color: #4E8696;\n"
"    font-family: Inter;\n"
"    font-size: 24px;\n"
"    font-style: normal;\n"
"    font-weight: 400;\n"
"    line-height: normal;\n"
"    text-decoration-line: underline;\n"
"}")
        self.skipButton.setObjectName("skipButton")
        self.mainUI.addWidget(self.skipButton)
        spacerItem8 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Preferred)
        self.mainUI.addItem(spacerItem8)
        self.horizontalLayout.addLayout(self.mainUI)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.fireworks2 = QtWidgets.QLabel(parent=self)
        self.fireworks2.setStyleSheet("border-color: rgb(255, 255, 255);")
        self.fireworks2.setText("")
        self.fireworks2.setPixmap(QtGui.QPixmap("designerUIFiles/milestones/../../Downloads/fireworks2.png"))
        self.fireworks2.setObjectName("fireworks2")
        self.verticalLayout_3.addWidget(self.fireworks2, 0, QtCore.Qt.AlignmentFlag.AlignHCenter|QtCore.Qt.AlignmentFlag.AlignTop)
        self.horizontalLayout.addLayout(self.verticalLayout_3)
        self.gridLayout_2.addLayout(self.horizontalLayout, 0, 0, 1, 1)

        self.label_2.setPixmap(QtGui.QPixmap("UI/icons/map.png"))

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)

        self.readingBoxGridLayout.addWidget(self, 0, 1)

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.label.setText(_translate("genericMilestone", "You\'ve reached milestone"))
        self.milestoneTotal.setText(_translate("genericMilestone", "X of X"))
        self.startButton.setText(_translate("genericMilestone", "[continue to milestone prompt]"))
        self.skipButton.setText(_translate("genericMilestone", "Skip this milestone"))

    def determineMileStone(self):
        """Determine which milestone will be used and update UI to reflect milestone progress"""
        # grab total amount of milestones
        count = self.readingScreen.parser.milestone_running_count
        remaining = self.readingScreen.parser.milestones_remaining

        # update total
        self.milestoneTotal.setText(f"{count} of {remaining}")

        # choose milestone based on settings
        self.chooseMilestone()

    def chooseMilestone(self):
        """roll a random number and choose from list of permitted milestones, set the choice to be used"""
        mileStoneChoices = []

        # already choosing milestones based on enabled ones, so we just need to change the settings object for this instance
        for milestone, enabled in self.settings.Milestones["enabled"].items():
            print(f"{milestone} : {enabled}")
            if enabled:
                mileStoneChoices.append(milestone)
        
        self.mileStoneChoice = mileStoneChoices[random.randrange(0, len(mileStoneChoices))]

        # based off choice, update button text
        self.startButton.setText(self.mileStoneChoice)

    def goToMilestone(self):
        """Setup milestone in grid layout and call any milestone specific methods"""
        milestoneWidget = None
        if self.mileStoneChoice == "Timed Break":
                milestoneWidget = m_timer.Ui_Timer()
                self.addMilestoneToGrid(milestoneWidget)
                milestoneWidget.startTimer()
        if self.mileStoneChoice == "Card Matching Minigame":
                milestoneWidget = m_cardmatch.CardMatchingGame()
                self.addMilestoneToGrid(milestoneWidget)

    def addMilestoneToGrid(self, milestoneWidget):
         """Add milestone to reading screen grid and update layout to show changes"""
         # add milestone widget to row 0 column 2 in grid layout
         # column 1 has the text partitioner, and column 2 has the generic milestone screen
         self.readingBoxGridLayout.addWidget(milestoneWidget, 0, 2)
         
         # hiding the generic milestone allows the widget to take its place as if the generic milestone was never there
         self.hide()
         milestoneWidget.show()

         # update reading screen box to reflect changes
         self.readingBoxGridLayout.update()

    def updateRemainingMilestonesText(self, newRemainder):
         self.milestoneTotal.setText(f"{self.readingScreen.parser.milestone_running_count} of {newRemainder}")

    def updateMilestonePicked(self):
         if self.settings.Milestones["enabled"][self.mileStoneChoice] is False:
              self.chooseMilestone()
         
                


